{
  "metadata": {
    "name": "Javascript-notes-full-Jack",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<h1>My Javascript Notes in Scribble </h1>",
      "status": "",
      "output": "<h1>My Javascript Notes in Scribble </h1>",
      "type": "html"
    },
    {
      "code": "\n<h1>Scribble.live shortcut:</h1>\n<pre>\n  - Alt + D: move current cells down;\n  - Shift + Enter: activate next cell below;\n  - Option + Enter: create new cell below;\n  - command + Enter: Run current cell;\n  - Control + M: Toggle btw Doc and Code mode;\n\n</pre>\n\n<h1> Chapter 1 Variables and DataTypes</h1>",
      "status": "",
      "output": "<h1>Scribble.live shortcut:</h1>\n<pre>  - Alt + D: move current cells down;\n  - Shift + Enter: activate next cell below;\n  - Option + Enter: create new cell below;\n  - command + Enter: Run current cell;\n  - Control + M: Toggle btw Doc and Code mode;\n\n<p></p></pre><p></p>\n<h1> Chapter 1 Variables and DataTypes</h1>",
      "type": "html"
    },
    {
      "code": "prefer use `let` and `const` to define variables",
      "status": "",
      "output": "<p>prefer use <code>let</code> and <code>const</code> to define variables</p>\n",
      "type": "html"
    },
    {
      "code": "let message = \"Hello, Jack\";\nconsole.log(message);\nscrib.show(message);",
      "status": "[2]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "Hello, Jack <br>",
      "type": "code"
    },
    {
      "code": "<H2>1.1 Data types</h2>\n<ul>\n  <li> String</li>\n  <li> Number</li>\n  <li> Boolean</li>\n  <li> Undefined</li>\n  <li> Null</li>\n</ul>",
      "status": "",
      "output": "<h2>1.1 Data types</h2>\n<ul>\n  <li> String</li>\n  <li> Number</li>\n  <li> Boolean</li>\n  <li> Undefined</li>\n  <li> Null</li>\n</ul>",
      "type": "html"
    },
    {
      "code": "\nlet num = 3;\nlet myStr = \"Jack\";\nlet isUser = true;\nlet myName;\nlet myNull = null;\n\nscrib.show(`Type of ${num}: ${typeof num}`);\nscrib.show(`Type of ${myStr}: ${typeof myStr}`);\nscrib.show(`Type of ${isUser}: ${typeof isUser}`);\nscrib.show(`Type of ${myName}: ${typeof myName}`);\nscrib.show(`Type of ${myNull}: ${typeof myNull}`);\n",
      "status": "[12]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "Type of 3: number <br>Type of Jack: string <br>Type of true: boolean <br>Type of undefined: undefined <br>Type of null: object <br>",
      "type": "code"
    },
    {
      "code": "<h2>1.2 basic variable operations </h2>\n",
      "status": "",
      "output": "<h2>1.2 basic variable operations </h2>\n",
      "type": "html"
    },
    {
      "code": "//>md\n\n| data types | Operators                                                    |\n| ---------- | ------------------------------------------------------------ |\n| String     | +(concatenation)                                             |\n| Numbers    | +(add), -(subtract), *(multiply), /(divide), %(module)       |\n| Comparison | ==(equality), strict equality(===),!=(inequality), <(less than),<=(less than or equal to), >(greater than), >=(greater than or equal to)  |\n| Boolean    | &&(and), \\|\\|(or), !(not)                                    |\n\n",
      "status": "",
      "output": "<table>\n<thead>\n<tr>\n<th>data types</th>\n<th>Operators</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String</td>\n<td>+(concatenation)</td>\n</tr>\n<tr>\n<td>Numbers</td>\n<td>+(add), -(subtract), *(multiply), /(divide), %(module)</td>\n</tr>\n<tr>\n<td>Comparison</td>\n<td>==(equality), strict equality(===),!=(inequality), &lt;(less than),&lt;=(less than or equal to), &gt;(greater than), &gt;=(greater than or equal to)</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>&amp;&amp;(and), ||(or), !(not)</td>\n</tr>\n</tbody></table>\n",
      "type": "html"
    },
    {
      "code": "// string concatenation\nlet firstName = \"Jack\";\nlet lastName = \"Cheng\";\nscrib.show(firstName, \" \" ,lastName);\nscrib.show(firstName + \" \" + lastName);",
      "status": "[15]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "Jack   Cheng <br>Jack Cheng <br>",
      "type": "code"
    },
    {
      "code": "// Mathmetical Operations\nlet num1 = 10;\nlet num2 = 5;\nscrib.show(\"Sum:\", num1 + num2);\nscrib.show(\"Subtract\", num1 - num2);\nscrib.show(\"Division:\", num1 / num2);\nscrib.show(\"Multiply:\", num1 * num2);",
      "status": "[1]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "Sum: 15 <br>Subtract 5 <br>Division: 2 <br>Multiply: 50 <br>",
      "type": "code"
    },
    {
      "code": "### 1.2.1 String \n\nJavascript 中 string method，Python 中取 string 譬如 \"hello jack\"，前几个字符是可以用 [0:3]（容易误写为[0, 3]，需要特别注意），但是 JS 中只能用 string method.\n```\nname = \"hello jack\"\nname[0:3]\n```\nJS 中必须用 slice method，不能用varName[0:3]访问。\n```\nconst name = \"hello jack\";\nconsole.log(name.slice(0, 3));\n```",
      "status": "",
      "output": "<h3>1.2.1 String</h3>\n<p>Javascript 中 string method，Python 中取 string 譬如 \"hello jack\"，前几个字符是可以用 [0:3]（容易误写为[0, 3]，需要特别注意），但是 JS 中只能用 string method.</p>\n<pre><code>name = \"hello jack\"\nname[0:3]\n</code></pre>\n<p>JS 中必须用 slice method，不能用varName[0:3]访问。</p>\n<pre><code>const name = \"hello jack\";\nconsole.log(name.slice(0, 3));\n</code></pre>\n",
      "type": "html"
    },
    {
      "code": "const name = \"hello jack\";\nscrib.show(name.slice(0, 3));",
      "status": "[2]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "hel <br>",
      "type": "code"
    },
    {
      "code": "//>md\n## 1.3 Comparison Operations\n\nfor more information about operations, refer to [mdn doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators)\n\n",
      "status": "",
      "output": "<h2>1.3 Comparison Operations</h2>\n<p>for more information about operations, refer to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\">mdn doc</a></p>\n",
      "type": "html"
    },
    {
      "code": "let x = 10;\nlet y = 15;\nlet a = 10;\nlet b = \"10\";\nscrib.show(\"Is x greater than y:\", x > y);\nscrib.show(\"IS x less than y:\", x < y);\nscrib.show(\"Is x equal to y:\", x==y); // better use strict equal\nscrib.show(\"Is x strict equal to y:\", x===y);\nscrib.show(\"Is a equal to b:\", a==b); // use strict equal operator whenever possible.\nscrib.show(\"Is a strict equal to b:\", a===b);",
      "status": "[12]<br><span style=\"font-size:8px\">7ms<span></span></span>",
      "output": "Is x greater than y: false <br>IS x less than y: true <br>Is x equal to y: false <br>Is x strict equal to y: false <br>Is a equal to b: true <br>Is a strict equal to b: false <br>",
      "type": "code"
    },
    {
      "code": "//>md\n## 1.4 boolean operations",
      "status": "",
      "output": "<h2>1.4 boolean operations</h2>\n",
      "type": "html"
    },
    {
      "code": "scrib.show(`true && true: `, true && true); // true\nscrib.show(`true && false: `, true && false); // false\nscrib.show(`false && false: `, false && false); // false\nscrib.show(`true || true: `, true || true); // true\nscrib.show(`true || false: `, true || false); // true\nscrib.show(`false || false: `, false || false); // false\nscrib.show(`!true: `, !true); // false\nscrib.show(`!false: `, !false); // true",
      "status": "[15]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "true &amp;&amp; true:  true <br>true &amp;&amp; false:  false <br>false &amp;&amp; false:  false <br>true || true:  true <br>true || false:  true <br>false || false:  false <br>!true:  false <br>!false:  true <br>",
      "type": "code"
    },
    {
      "code": "//>md\n## 1.5 let and const\n\n`let` is block-scoped, meaning itÃ¢ÂÂs only accessible within the { ... } block, statement, or expression where it was declared.\n\n`const` is also block-scoped.\n\n`var` is function-scoped Ã¢ÂÂ meaning itÃ¢ÂÂs accessible throughout the entire function in which itÃ¢ÂÂs declared, or globally if declared outside any function.\n\n> Caution: use `let` to define variables whenever possible.",
      "status": "",
      "output": "<h2>1.5 let and const</h2>\n<p><code>let</code> is block-scoped, meaning itÃ¢ÂÂs only accessible within the { ... } block, statement, or expression where it was declared.</p>\n<p><code>const</code> is also block-scoped.</p>\n<p><code>var</code> is function-scoped Ã¢ÂÂ meaning itÃ¢ÂÂs accessible throughout the entire function in which itÃ¢ÂÂs declared, or globally if declared outside any function.</p>\n<blockquote>\n<p>Caution: use <code>let</code> to define variables whenever possible.</p>\n</blockquote>\n",
      "type": "html"
    },
    {
      "code": "{\n  let y = 1;\n}\nscrib.show(y);",
      "status": "[-]",
      "output": "<p class=\"error\">y is not defined</p>",
      "type": "code"
    },
    {
      "code": "// block can be nested.\nlet x = 100;\n{\n  let x = 1;\n  {\n    let x = 2;\n\tscrib.show(\"x=\", x); // inner block can have access to value defined in outer block;\n  }\n  scrib.show(\"x=\", x);\n\n}\nscrib.show(\"x=\", x);",
      "status": "[11]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "x= 2 <br>x= 1 <br>x= 100 <br>",
      "type": "code"
    },
    {
      "code": "const pi = 3.14;\npi = 3.1415926; // will show an error: Assignment to constant variable.",
      "status": "[-]",
      "output": "<p class=\"error\">Assignment to constant variable.</p>",
      "type": "code"
    },
    {
      "code": "//>md\n# Chapter 2. Control Flow and Conditional Statements.",
      "status": "",
      "output": "<h2>Chapter 2. Control Flow and Conditional Statements.</h2>\n",
      "type": "html"
    },
    {
      "code": "## 2.1 if statement\n\nsyntax:\n```\nif (condition) {\n  // Code to be executed if the conditon is true\n} else {\n  // Code to be executed if the condition is false\n}\n\n```",
      "status": "",
      "output": "<h2>2.1 if statement</h2>\n<p>syntax:</p>\n<pre><code>if (condition) {\n  // Code to be executed if the conditon is true\n} else {\n  // Code to be executed if the condition is false\n}\n</code></pre>\n",
      "type": "html"
    },
    {
      "code": "let temp = 25;\n\nif (temp > 30){\n  scrib.show(\"It's a hot day.\");\n} else {\n  scrib.show(\"It's a cool day.\");\n}",
      "status": "[18]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "It's a cool day. <br>",
      "type": "code"
    },
    {
      "code": "// mutiple conditions\n\nlet temp = 35;\n\nfunction checkWeather(temp){\n  if (temp > 30) {\n\tscrib.show(\"It's hot.\");\n  } else if (temp > 15) {\n\tscrib.show(\"It's comfortable\");\n  } else {\n\tscrib.show(\"It's cool.\");\n  };\n}\n\ntemps = [-20, 0, 20, 25, 30, 35];\ntemps.forEach((temp) => {\n  scrib.show(`Temp is  `+ temp+ \": \");\n  checkWeather(temp);\n})",
      "status": "[24]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "Temp is  -20:  <br>It's cool. <br>Temp is  0:  <br>It's cool. <br>Temp is  20:  <br>It's comfortable <br>Temp is  25:  <br>It's comfortable <br>Temp is  30:  <br>It's comfortable <br>Temp is  35:  <br>It's hot. <br>",
      "type": "code"
    },
    {
      "code": "### 2.1.2 Ternary Operator: ?...:\n\nTernary operator is a shortcut to if{} and else{} statements. syntax:\n```\ncondition ? codeIfTrue : codeIfFalse;\n```\n",
      "status": "",
      "output": "<h3>2.1.2 Ternary Operator: ?...:</h3>\n<p>Ternary operator is a shortcut to if{} and else{} statements. syntax:</p>\n<pre><code>condition ? codeIfTrue : codeIfFalse;\n</code></pre>\n",
      "type": "html"
    },
    {
      "code": "let temp = 35;\nlet message = temp > 30 ? \"It's a hot day.\" : \"it's not hot.\"\nscrib.show(message);\n\nlet isStudent = true;\nlet message2 = isStudent ? \"You are a student\" : \"You are NOT a student.\"\nscrib.show(message2)",
      "status": "[13]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "It's a hot day. <br>You are a student <br>",
      "type": "code"
    },
    {
      "code": "\n## 2.2 for statement",
      "status": "",
      "output": "<h2>2.2 for statement</h2>\n",
      "type": "html"
    },
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "### 2.2.1 for...of statement\nIn JavaScript, `for...of` statement Applies to iterable objects. similar to `for...in statement` in Python language.",
      "status": "",
      "output": "<h3>2.2.1 for...of statement</h3>\n<p>In JavaScript, <code>for...of</code> statement Applies to iterable objects. similar to <code>for...in statement</code> in Python language.</p>\n",
      "type": "html"
    },
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "//>md\n### 2.2.2 for...in statement",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "//>md\n## 2.3 while statement",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "//>md\n# 3 function\n\n",
      "status": "",
      "output": "<h1>3 function</h1>\n",
      "type": "html"
    },
    {
      "code": "## 3.1 Arrow function \nfor more information, refer to docs [MDN-docs-Arrow Fuction expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n\n```javascript\n() => expression\n\nparam => expression\n\n(param) => expression\n\n(param1, paramN) => expression\n\n() => {\n  statements\n}\n\nparam => {\n  statements\n}\n\n(param1, paramN) => {\n  statements\n}\n```\n",
      "status": "",
      "output": "<h2>3.1 Arrow function</h2>\n<p>for more information, refer to docs <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">MDN-docs-Arrow Fuction expressions</a></p>\n<pre><code class=\"language-javascript\">() =&gt; expression\n\n<p>param =&gt; expression</p>\n<p>(param) =&gt; expression</p>\n<p>(param1, paramN) =&gt; expression</p>\n<p>() =&gt; {\n  statements\n}</p>\n<p>param =&gt; {\n  statements\n}</p>\n</code><p><code class=\"language-javascript\">(param1, paramN) =&gt; {\n  statements\n}\n</code></p></pre><p></p>\n",
      "type": "html"
    },
    {
      "code": "\nIn functional programming, array functions (also known as array methods or higher-order functions) are functions that operate on arrays or collections of data and produce a new array or a transformed result based on the input array. These functions are designed to support a more declarative and functional style of programming, where you can perform various operations on arrays without explicitly using loops or mutating the original array.\nSome commonly used array functions in functional programming include:\n<pre>\n1. `map`: Transforms each element of an array by applying a given function and returns a new array with the transformed elements.\n\n2. `filter`: Selects elements from an array based on a given condition and returns a new array with the selected elements.\n\n3. `reduce`: Applies a given function to reduce an array into a single value. It iterates over each element of the array and accumulates the result.\n\n4. `forEach`: Executes a provided function on each element of an array, but it does not produce a new array.\n\n5. `some` / `every`: Checks if at least one element or every element in an array satisfies a given condition, respectively.\n</pre>\n> similar to `any` and `all` in Python programming language.\n\nThese array functions, among others, enable functional programming paradigms by providing higher-order functions that abstract away the need for explicit iteration and mutation of arrays. They encourage immutability and make code more concise, readable, and easier to reason about.\n\nfor more Array methods refer to [MDN-Array methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)",
      "status": "",
      "output": "<p>In functional programming, array functions (also known as array methods or higher-order functions) are functions that operate on arrays or collections of data and produce a new array or a transformed result based on the input array. These functions are designed to support a more declarative and functional style of programming, where you can perform various operations on arrays without explicitly using loops or mutating the original array.\nSome commonly used array functions in functional programming include:</p>\n<pre>1. `map`: Transforms each element of an array by applying a given function and returns a new array with the transformed elements.\n\n<ol start=\"2\">\n<li><p><code>filter</code>: Selects elements from an array based on a given condition and returns a new array with the selected elements.</p>\n</li>\n<li><p><code>reduce</code>: Applies a given function to reduce an array into a single value. It iterates over each element of the array and accumulates the result.</p>\n</li>\n<li><p><code>forEach</code>: Executes a provided function on each element of an array, but it does not produce a new array.</p>\n</li>\n<li><p><code>some</code> / <code>every</code>: Checks if at least one element or every element in an array satisfies a given condition, respectively.\n</p></li></ol></pre><p></p>\n<blockquote>\n<p>similar to <code>any</code> and <code>all</code> in Python programming language.</p>\n</blockquote>\n<p>These array functions, among others, enable functional programming paradigms by providing higher-order functions that abstract away the need for explicit iteration and mutation of arrays. They encourage immutability and make code more concise, readable, and easier to reason about.</p>\n<p>for more Array methods refer to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN-Array methods</a></p>\n\n",
      "type": "html"
    },
    {
      "code": "// for each\nconst numbers = [1, 2, 3, 4];\nnumbers.forEach((num) => {\n  display(num);\n})",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "// forEach()\nconst array = [\"a\", \"b\", \"c\"];\narray.forEach((element) => display(element));",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "//filter.\nconst numbers = [1, 2, 3, 4];\nconst is_even = num => num % 2 === 0;\ndisplay(numbers.filter(is_even));",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "//push\nconst copyedArray = [];\nconst numbers = [1, 2, 3, 4,\"5\"];\nnumbers.forEach((element) => copyedArray.push(element));\ndisplay(copyedArray);",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "// example from BroCode\nconst numbers = [1, 2, 3, 4, 5, 6];\n\nconst squares = numbers.map((element) => Math.pow(element, 2));\nconst cubes = numbers.map((element) => Math.pow(element, 3));\nconst evenNums = numbers.filter((element) => element % 2 ===0);\nconst total = numbers.reduce((accum, element) => accum + element);\nscrib.show(squares);\nscrib.show(cubes);\nscrib.show(evenNums);\nscrib.show(total);",
      "status": "[6]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "[\n  1,\n  4,\n  9,\n  16,\n  25,\n  36\n] <br>[\n  1,\n  8,\n  27,\n  64,\n  125,\n  216\n] <br>[\n  2,\n  4,\n  6\n] <br>21 <br>",
      "type": "code"
    },
    {
      "code": "## 3.2 regular function + foreach",
      "status": "",
      "output": "<h2>3.2 regular function + foreach</h2>\n",
      "type": "html"
    },
    {
      "code": "let numbers = [1, 2, 3, 4, 5];\n\n// this will mutate the original numbers\nfunction double(element, index, array){\n  array[index] = element * 2;\n}\n\n// perform the same action as double(), but return a new array.\nfunction double2(array) {\n  return array.map(element => element * 2);\n}\n\n// also equal to double2(), but return a new array.\nfunction double3(array) {\n  const result = [];\n  for (let element of array) {result.push(element * 2)}\n  return result;\n}\n\nnumbers.forEach(double); // can Pass a function as variable, for example double()\nscrib.show(numbers);\nscrib.show(double2(numbers));\nscrib.show(double3(numbers));",
      "status": "[7]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "[\n  2,\n  4,\n  6,\n  8,\n  10\n] <br>[\n  4,\n  8,\n  12,\n  16,\n  20\n] <br>[\n  4,\n  8,\n  12,\n  16,\n  20\n] <br>",
      "type": "code"
    },
    {
      "code": "// example2: deal with string \nlet fruits = ['apple', 'orange', 'banana', 'coconut'];\n\nfruits.forEach(capitalize2);\n\nfunction capitalize(fruit, index, array) {\n  array[index] = fruit.toUpperCase();\n}\n\nfunction capitalize2(fruit, index, array) {\n  array[index] = fruit.charAt(0).toUpperCase() + fruit.slice(1).toLowerCase();\n}\n\nscrib.show(fruits);\n\n",
      "status": "[11]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "[\n  \"Apple\",\n  \"Orange\",\n  \"Banana\",\n  \"Coconut\"\n] <br>",
      "type": "code"
    },
    {
      "code": "//>md\n## 3.1 arrow function\n\ndifferent ways to write arrow functions.",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "//>md\n\n# 5. Global object",
      "status": "",
      "output": "<h1>5. Global object</h1>\n",
      "type": "html"
    },
    {
      "code": "//>md\n## 5.1 Array",
      "status": "",
      "output": "<h2>5.1 Array</h2>\n",
      "type": "html"
    },
    {
      "code": "Array.from() method, refer to [MDN doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n\t\t\t\t\t\t\t\t\t\t\nit's a good practice to return only one iterable object, i.e. `x + x`, if you need to return a complex object, it's like this:\n```\nconst books = Array.from(bookElements, (book) => {\n  // return one object per iteration.\n  return {\n    title: book.querySelector('h3 a')?.getAttribute('title')?.trim() || \"\",\n    price: book.querySelector('.price_color')?.textContent.trim() || \"\",\n    stock: book.querySelector('.instock.availability')?.textContent.trim() || \"\"\n  };\n});\n\n```",
      "status": "",
      "output": "<p>Array.from() method, refer to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">MDN doc</a></p>\n<p>it's a good practice to return only one iterable object, i.e. <code>x + x</code>, if you need to return a complex object, it's like this:</p>\n<pre><code>const books = Array.from(bookElements, (book) =&gt; {\n  // return one object per iteration.\n  return {\n    title: book.querySelector('h3 a')?.getAttribute('title')?.trim() || \"\",\n    price: book.querySelector('.price_color')?.textContent.trim() || \"\",\n    stock: book.querySelector('.instock.availability')?.textContent.trim() || \"\"\n  };\n});\n</code></pre>\n",
      "type": "html"
    },
    {
      "code": "// Using an arrow function as the map function to\n// manipulate the elements\nArray.from([1, 2, 3], (x) => x + x);\n// [2, 4, 6]\n\n// Generate a sequence of numbers\n// Since the array is initialized with `undefined` on each position,\n// the value of `v` below will be `undefined`\nArray.from({ length: 5 }, (v, i) => i);\n// [0, 1, 2, 3, 4]\n",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "### 5.1.2 Spread operator \n\nfunction: unpack the element",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "numbers = [1, 2, 3]\nlet maximum = Math.max(...numbers);\nscrib.show(maximum);",
      "status": "[16]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "3 <br>",
      "type": "code"
    },
    {
      "code": "## 5.2 Object",
      "status": "",
      "output": "<h2>5.2 Object</h2>\n",
      "type": "html"
    },
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "## 5.3 JSON\n\nwebsite to convert json to csv: [convertcsv](https://www.convertcsv.com/json-to-csv.htm)",
      "status": "",
      "output": "<h2>5.2 JSON</h2>\n<p>website to convert json to csv: <a href=\"https://www.convertcsv.com/json-to-csv.htm\">convertcsv</a></p>\n",
      "type": "html"
    },
    {
      "code": "JSON is a string whose format very much resembles JavaScript object literal format. The following is a valid JSON string representing an object.\nJSON text basically looks like a JavaScript object inside a string. for example:\n```\n\ndata = [\n  {\n    \"name\": \"Molecule Man\",\n    \"age\": 29,\n    \"secretIdentity\": \"Dan Jukes\",\n    \"powers\": [\"Radiation resistance\", \"Turning tiny\", \"Radiation blast\"]\n  },\n  {\n    \"name\": \"Madame Uppercut\",\n    \"age\": 39,\n    \"secretIdentity\": \"Jane Wilson\",\n    \"powers\": [\n      \"Million tonne punch\",\n      \"Damage resistance\",\n      \"Superhuman reflexes\"\n    ]\n  }\n];\n\n```",
      "status": "",
      "output": "<p>JSON is a string whose format very much resembles JavaScript object literal format. The following is a valid JSON string representing an object.\nJSON text basically looks like a JavaScript object inside a string. for example:</p>\n<pre><code>[\n  {\n    \"name\": \"Molecule Man\",\n    \"age\": 29,\n    \"secretIdentity\": \"Dan Jukes\",\n    \"powers\": [\"Radiation resistance\", \"Turning tiny\", \"Radiation blast\"]\n  },\n  {\n    \"name\": \"Madame Uppercut\",\n    \"age\": 39,\n    \"secretIdentity\": \"Jane Wilson\",\n    \"powers\": [\n      \"Million tonne punch\",\n      \"Damage resistance\",\n      \"Superhuman reflexes\"\n    ]\n  }\n]\n</code></pre>\n",
      "type": "html"
    },
    {
      "code": "# Chapter 6 Real World Project",
      "status": "",
      "output": "<h1>Chapter 6 Real World Project</h1>\n",
      "type": "html"
    },
    {
      "code": "## Project 1: scraping a real website[books.toscrape](http://books.toscrape.com/)",
      "status": "",
      "output": "<h2>Project 1: scraping a real website<a href=\"http://books.toscrape.com/\">books.toscrape</a></h2>\n",
      "type": "html"
    },
    {
      "code": "// First way to scrape the website, use for...each\nconst bookElements = document.querySelectorAll('.product_pod');\nbooks = [];\none_book = {};\nfor (let book of bookElements) {\n  const title = book.querySelector('h3 a').getAttribute('title').trim();\n  const price = book.querySelector('.price_color')?.textContent.trim() || \"\";\n  const stock = book.querySelector('.instock.availability')?.textContent.trim() || \"\";\n  one_book['title'] = title;\n  one_book['price'] = price;\n  one_book['stock'] = stock;\n  books.push(one_book);\n\n}\nconsole.log(books);\n",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "// Second way to scrape the website, use Array.from method + arrow function\n\nconst bookElements = document.querySelectorAll('.product_pod');\n\n// Use Array.from method\nconst books = Array.from(bookElements, (book) => {\n  // create one object per iteration, can only return one object at a time.\n  return {\n    title: book.querySelector('h3 a')?.getAttribute('title')?.trim() || \"\",\n    price: book.querySelector('.price_color')?.textContent.trim() || \"\",\n    stock: book.querySelector('.instock.availability')?.textContent.trim() || \"\"\n  };\n});\n\nconsole.log(books);\n\n\n",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "the function below can be used to convert any JSON object to csv, and trigger download.\n```\nfunction downloadCSV(data, filename = \"data.csv\") {\n  if (!data || !data.length) {\n    console.error(\"No data to download.\");\n    return;\n  }\n\n  // Create CSV header row from object keys\n  const header = Object.keys(data[0]).join(\",\");\n\n  // Map each object to a CSV row, escaping quotes\n  const rows = data.map(row =>\n    Object.values(row)\n      .map(value => `\"${String(value).replace(/\"/g, '\"\"')}\"`)\n      .join(\",\")\n  );\n\n  // Combine header and rows with line breaks\n  const csvContent = [header, ...rows].join(\"\\n\");\n\n  // Create a Blob (file object) from the CSV string\n  const blob = new Blob([csvContent], { type: \"text/csv\" });\n\n  // Create a temporary link element for download\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a); // Append to DOM (needed for Firefox)\n  a.click(); // Trigger download\n  document.body.removeChild(a); // Clean up\n  URL.revokeObjectURL(url); // Free memory\n}\n\n// Step 3: Call the function to download the scraped books\ndownloadCSV(books, \"books.csv\");\n```",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "/*Further more the above code can be simplified as \nbut when scraping other websites, code in books object need to be rewritten.\n\n*/\n\nconst books = Array.from(\n  document.querySelectorAll('.product_pod'),\n  book => ({\n    title: book.querySelector('h3 a')?.getAttribute('title')?.trim() || \"\",\n    price: book.querySelector('.price_color')?.textContent.trim() || \"\",\n    stock: book.querySelector('.instock.availability')?.textContent.trim() || \"\"\n  })\n);\nconsole.log(books);\n\n// following code is a universal function to download a JSON string to csv file and download it.\n// Step 2: Define a function to convert JSON to CSV and download it\nfunction downloadCSV(data, filename = \"data.csv\") {\n  if (!data || !data.length) {\n    console.error(\"No data to download.\");\n    return;\n  }\n\n  // Create CSV header row from object keys\n  const header = Object.keys(data[0]).join(\",\");\n\n  // Map each object to a CSV row, escaping quotes\n  const rows = data.map(row =>\n    Object.values(row)\n      .map(value => `\"${String(value).replace(/\"/g, '\"\"')}\"`)\n      .join(\",\")\n  );\n\n  // Combine header and rows with line breaks\n  const csvContent = [header, ...rows].join(\"\\n\");\n\n  // Create a Blob (file object) from the CSV string\n  const blob = new Blob([csvContent], { type: \"text/csv\" });\n\n  // Create a temporary link element for download\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a); // Append to DOM (needed for Firefox)\n  a.click(); // Trigger download\n  document.body.removeChild(a); // Clean up\n  URL.revokeObjectURL(url); // Free memory\n}\n\n// Step 3: Call the function to download the scraped books\ndownloadCSV(books, \"books.csv\");",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "// third way, use array.forEach() + arrow function.\n\nconst bookElements = document.querySelectorAll('.product_pod');\nlet books = [];\n\n// use array.forEach() method\nbookElements.forEach((book) => {\n  // initialize one_book at evey iteration.\n  one_book = {};\n  one_book['title'] = book.querySelector('h3 a')?.getAttribute('title')?.trim() || \"\";\n  one_book['price'] = book.querySelector('.price_color')?.textContent.trim() || \"\";\n  one_book['stock'] = book.querySelector('.instock.availability')?.textContent.trim() || \"\";\n  \n  books.push(one_book);\n});\n\nconsole.log(books);",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "## Project 2: Scraping Qichacha.com company shareholder data\n",
      "status": "",
      "output": "<h2>Project 2: Scraping Qichacha.com company shareholder data</h2>\n",
      "type": "html"
    },
    {
      "code": "// this function only applies to qichacha.com\nfunction extractShareholders() {\n  /* for every row return a object.  */ \n  const shareholders = Array.from(\n\tdocument.querySelectorAll('.app-tree-table .ntable tr'), // locate the only table that has shareholder information.\n\t(row, index) => {\n\t  // \n\t  one_holder = {};\n\t  const fullNameElem = row.querySelector('td:nth-child(2) a');\n\t  // shareholder ratio\n\t  const stockRatioElem = row.querySelector('td:nth-child(3) .has-stock span:first-child');\n\t  // date \n\t  const dateElem = row.querySelector('td:nth-last-child(2)');\n\t  // simplied company name, or alias\n\t  const simpleNameElem = row.querySelector('td:nth-last-child(1) a');\n\n\t  // return a object(similar to dictionary in Python)\n\t  return {\n\t\tindex: index,\n\t\tfullName: fullNameElem ? fullNameElem.textContent.trim() : '',\n\t\tstockRatio: stockRatioElem ? stockRatioElem.textContent.trim() : '',\n\t\tdate: dateElem ? dateElem.textContent.trim() : '',\n\t\tsimpleName: simpleNameElem ? simpleNameElem.textContent.trim() : '',\n\t  };\n  \n  });\n\n    // filter out rows with no value.\n    const cleaned_shareholders = shareholders.filter(item => item.fullName && item.fullName.trim() !== \"\");\n\n    return cleaned_shareholders;\n}\n\n// Step 2: Define a function to convert JSON to CSV and download it\nfunction downloadCSV(data, filename = \"data.csv\") {\n  if (!data || !data.length) {\n    console.error(\"No data to download.\");\n    return;\n  }\n\n  // Create CSV header row from object keys\n  const header = Object.keys(data[0]).join(\",\");\n\n  // Map each object to a CSV row, escaping quotes\n  const rows = data.map(row =>\n    Object.values(row)\n      .map(value => `\"${String(value).replace(/\"/g, '\"\"')}\"`)\n      .join(\",\")\n  );\n\n  // Combine header and rows with line breaks\n  const csvContent = [header, ...rows].join(\"\\n\");\n\n  // Create a Blob (file object) from the CSV string\n  const blob = new Blob([csvContent], { type: \"text/csv\" });\n\n  // Create a temporary link element for download\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a); // Append to DOM (needed for Firefox)\n  a.click(); // Trigger download\n  document.body.removeChild(a); // Clean up\n  URL.revokeObjectURL(url); // Free memory\n}\n\ndata = extractShareholders();\ndownloadCSV(data, \"shareholder.csv\");\n",
      "status": "",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}